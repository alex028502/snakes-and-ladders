{
  "version": 3,
  "sources": ["../../node_modules/workbox-core/_version.js", "../../node_modules/workbox-core/models/messages/messages.js", "../../node_modules/workbox-core/models/messages/messageGenerator.js", "../../node_modules/workbox-core/_private/WorkboxError.js", "../../node_modules/workbox-core/_private/assert.js", "../../node_modules/workbox-core/_private/logger.js", "../../node_modules/workbox-routing/_version.js", "../../node_modules/workbox-routing/utils/constants.js", "../../node_modules/workbox-routing/utils/normalizeHandler.js", "../../node_modules/workbox-routing/Route.js", "../../node_modules/workbox-routing/NavigationRoute.js", "../../node_modules/workbox-routing/RegExpRoute.js", "../../node_modules/workbox-core/_private/getFriendlyURL.js", "../../node_modules/workbox-routing/Router.js", "../../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js", "../../node_modules/workbox-routing/registerRoute.js", "../../node_modules/workbox-routing/setCatchHandler.js", "../../node_modules/workbox-routing/setDefaultHandler.js", "../../node_modules/workbox-routing/index.js", "../../node_modules/workbox-core/_private/cacheNames.js", "../../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js", "../../node_modules/workbox-core/_private/Deferred.js", "../../node_modules/workbox-core/models/quotaErrorCallbacks.js", "../../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js", "../../node_modules/workbox-core/_private/timeout.js", "../../node_modules/workbox-strategies/_version.js", "../../node_modules/workbox-strategies/StrategyHandler.js", "../../node_modules/workbox-strategies/Strategy.js", "../../node_modules/workbox-strategies/utils/messages.js", "../../node_modules/workbox-strategies/CacheFirst.js", "../../node_modules/workbox-strategies/CacheOnly.js", "../../node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js", "../../node_modules/workbox-strategies/NetworkFirst.js", "../../node_modules/workbox-strategies/NetworkOnly.js", "../../node_modules/workbox-strategies/StaleWhileRevalidate.js", "../../node_modules/workbox-strategies/index.js", "../../src/sw.js"],
  "sourcesContent": ["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.4.1'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return (`The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`);\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`);\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName, }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}` +\n            `${funcName}()' must be of type ${expectedType}.`);\n    },\n    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem, }) => {\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) {\n            return (`The return value from ` +\n                `'${moduleName}.${classNameStr}${funcName}()' ` +\n                `must be an instance of class ${expectedClassName}.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}${funcName}()' ` +\n            `must be an instance of class ${expectedClassName}.`);\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName, }) => {\n        if (!expectedMethod ||\n            !paramName ||\n            !moduleName ||\n            !className ||\n            !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return (`${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`);\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return (`An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`);\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`);\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage }) => {\n        if (!thrownErrorMessage) {\n            throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n        }\n        return (`An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownErrorMessage}'.`);\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return (`You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`);\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return (`The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`);\n    },\n    'unregister-route-route-not-registered': () => {\n        return (`The route you're trying to unregister was not previously ` +\n            `registered.`);\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return (`The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`);\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return (`The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`);\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return (`The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`);\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName, }) => {\n        return (`The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`);\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return (`When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`);\n    },\n    'channel-name-required': () => {\n        return (`You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`);\n    },\n    'invalid-responses-are-same-args': () => {\n        return (`The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`);\n    },\n    'expire-custom-caches-only': () => {\n        return (`You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`);\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return (`The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`);\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return (`Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return (`The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return (`The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`);\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return (`Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`);\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return (`There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`);\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return (`The precaching request for '${url}' failed` +\n            (status ? ` with an HTTP status of ${status}.` : `.`));\n    },\n    'non-precached-url': ({ url }) => {\n        return (`createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`);\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`);\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin }) => {\n        return (`workbox-core.copyResponse() can only be used with same-origin ` +\n            `responses. It was passed a response with origin ${origin}.`);\n    },\n};\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n", "/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n", "\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.4.1'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {module:workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * [Route]{@link module:workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\nexport { setCatchHandler };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n}\nexport { setDefaultHandler };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { NavigationRoute } from './NavigationRoute.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { registerRoute } from './registerRoute.js';\nimport { Route } from './Route.js';\nimport { Router } from './Router.js';\nimport { setCatchHandler } from './setCatchHandler.js';\nimport { setDefaultHandler } from './setDefaultHandler.js';\nimport './_version.js';\n/**\n * @module workbox-routing\n */\nexport { NavigationRoute, RegExpRoute, registerRoute, Route, Router, setCatchHandler, setDefaultHandler, };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n", "/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof module:workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n", "/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n", "\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.4.1'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * [handle()]{@link module:workbox-strategies.Strategy~handle} or\n * [handleAll()]{@link module:workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof module:workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {module:workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     *     [match callback]{@link module:workbox-routing~matchCallback},\n     *     (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * [match callback]{@link module:workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * [`iterateCallbacks()`]{@link module:workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * [`doneWaiting()`]{@link module:workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * [`waitUntil()`]{@link module:workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof module:workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * [workbox-core]{@link module:workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * [route]{@link module:workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to [`handle()`]{@link module:workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of [response, done] promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the [`handler`]{@link module:workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {module:workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof module:workbox-strategies.Strategy\n */\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport '../_version.js';\nexport const messages = {\n    strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\n    printFinalResponse: (response) => {\n        if (response) {\n            logger.groupCollapsed(`View the final response here.`);\n            logger.log(response || '[No response returned]');\n            logger.groupEnd();\n        }\n    },\n};\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [cache-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass CacheOnly extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        const response = await handler.cacheMatch(request);\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this.cacheName}' ` + `cache.`);\n                messages.printFinalResponse(response);\n            }\n            else {\n                logger.log(`No response found in the '${this.cacheName}' cache.`);\n            }\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n}\nexport { CacheOnly };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {}) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request),\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds} seconds.`);\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheFirst } from './CacheFirst.js';\nimport { CacheOnly } from './CacheOnly.js';\nimport { NetworkFirst } from './NetworkFirst.js';\nimport { NetworkOnly } from './NetworkOnly.js';\nimport { StaleWhileRevalidate } from './StaleWhileRevalidate.js';\nimport { Strategy } from './Strategy.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * There are common caching strategies that most service workers will need\n * and use. This module provides simple implementations of these strategies.\n *\n * @module workbox-strategies\n */\nexport { CacheFirst, CacheOnly, NetworkFirst, NetworkOnly, StaleWhileRevalidate, Strategy, StrategyHandler, };\n", "const {registerRoute} = require('workbox-routing');\nconst {NetworkFirst} = require('workbox-strategies');\n\nregisterRoute(\n    ({url}) => url.pathname.startsWith('/'),\n    new NetworkFirst(),\n);\n\n// this has not precache - should work out how to to that\n// I had it before with the out of the box cache first\n"],
  "mappings": "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",
  "names": []
}
